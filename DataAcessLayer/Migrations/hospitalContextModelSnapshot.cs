// <auto-generated />
using System;
using DataAcessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAcessLayer.Migrations
{
    [DbContext(typeof(hospitalContext))]
    partial class hospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAcessLayer.Models.Admission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Patient2Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("entryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("admission_date");

                    b.Property<DateTime>("exitDate")
                        .HasColumnType("datetime")
                        .HasColumnName("discharge_date");

                    b.Property<int>("patientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_id");

                    b.HasKey("Id");

                    b.HasIndex("Patient2Id");

                    b.HasIndex(new[] { "patientId" }, "fk_Admission_Patient1_idx");

                    b.ToTable("admission", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("Doctor")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_idDoctor");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_idPatient");

                    b.Property<int>("_Doctor2Id")
                        .HasColumnType("int");

                    b.Property<int>("_Patient2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_Doctor2Id");

                    b.HasIndex("_Patient2Id");

                    b.HasIndex(new[] { "Doctor" }, "fk_Appointment_Doctor_idx");

                    b.HasIndex(new[] { "PatientId" }, "fk_Appointment_Patient1_idx");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("contact");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("theme");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "username_UNIQUE")
                        .IsUnique();

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("item_name");

                    b.HasKey("Id");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("surname");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("theme");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "username_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("username_UNIQUE1");

                    b.ToTable("manager", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contact");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("surname");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("theme");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("nurse", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("contact");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("diagnosis");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_idDoctor");

                    b.Property<int>("DoctorIdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("DoctorIdDoctorNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_idPatient");

                    b.Property<int>("PatientIdPatient")
                        .HasColumnType("int");

                    b.Property<int>("PatientIdPatientNavigationId")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("prescription");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIdDoctorNavigationId");

                    b.HasIndex("PatientIdPatientNavigationId");

                    b.HasIndex(new[] { "DoctorId" }, "fk_Record_Doctor1_idx");

                    b.HasIndex(new[] { "PatientId" }, "fk_Record_Patient1_idx");

                    b.ToTable("record", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Surgery", b =>
                {
                    b.Property<int>("IdSurgery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSurgery");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_id");

                    b.HasKey("IdSurgery")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DoctorId" }, "fk_Surgery_Doctor1_idx");

                    b.HasIndex(new[] { "PatientId" }, "fk_Surgery_Patient1_idx");

                    b.ToTable("surgery", (string)null);
                });

            modelBuilder.Entity("DataAcessLayer.Models.Admission", b =>
                {
                    b.HasOne("DataAcessLayer.Models.Patient", "Patient2")
                        .WithMany()
                        .HasForeignKey("Patient2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.Models.Patient", "patient")
                        .WithMany("Admissions")
                        .HasForeignKey("patientId")
                        .IsRequired()
                        .HasConstraintName("fk_Admission_Patient1");

                    b.Navigation("Patient2");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("DataAcessLayer.Models.Appointment", b =>
                {
                    b.HasOne("DataAcessLayer.Models.Doctor", "_Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctor")
                        .IsRequired()
                        .HasConstraintName("fk_Appointment_Doctor");

                    b.HasOne("DataAcessLayer.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("fk_Appointment_Patient1");

                    b.HasOne("DataAcessLayer.Models.Doctor", "_Doctor2")
                        .WithMany()
                        .HasForeignKey("_Doctor2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.Models.Patient", "_Patient2")
                        .WithMany()
                        .HasForeignKey("_Patient2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("_Doctor");

                    b.Navigation("_Doctor2");

                    b.Navigation("_Patient2");
                });

            modelBuilder.Entity("DataAcessLayer.Models.Record", b =>
                {
                    b.HasOne("DataAcessLayer.Models.Doctor", "Doctor")
                        .WithMany("Records")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("fk_Record_Doctor1");

                    b.HasOne("DataAcessLayer.Models.Doctor", "DoctorIdDoctorNavigation")
                        .WithMany()
                        .HasForeignKey("DoctorIdDoctorNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.Models.Patient", "Patient")
                        .WithMany("Records")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("fk_Record_Patient1");

                    b.HasOne("DataAcessLayer.Models.Patient", "PatientIdPatientNavigation")
                        .WithMany()
                        .HasForeignKey("PatientIdPatientNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("DoctorIdDoctorNavigation");

                    b.Navigation("Patient");

                    b.Navigation("PatientIdPatientNavigation");
                });

            modelBuilder.Entity("DataAcessLayer.Models.Surgery", b =>
                {
                    b.HasOne("DataAcessLayer.Models.Doctor", "Doctor")
                        .WithMany("Surgeries")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("fk_Surgery_Doctor1");

                    b.HasOne("DataAcessLayer.Models.Patient", "Patient")
                        .WithMany("Surgeries")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("fk_Surgery_Patient1");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAcessLayer.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Records");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("DataAcessLayer.Models.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Appointments");

                    b.Navigation("Records");

                    b.Navigation("Surgeries");
                });
#pragma warning restore 612, 618
        }
    }
}
